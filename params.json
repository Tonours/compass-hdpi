{"name":"Compass HDPI","note":"Don't delete this file! It's used internally to help with page regeneration.","tagline":"Compass mixins for dealing with HDPI (a.k.a. Retina) sprites and images in your CSS","google":"","body":"# Compass HDPI\r\n\r\nCompass mixins for dealing with HDPI (a.k.a. Retina) sprites and images in your CSS.  \r\nBased on [Compass Sprite Base](https://github.com/chriseppstein/compass/blob/stable/frameworks/compass/stylesheets/compass/utilities/sprites/_base.scss) ([doc](http://compass-style.org/reference/compass/utilities/sprites/base/)).\r\n\r\n\r\n## Installation\r\n\r\nAdd the following lines in your Gemfile :\r\n\r\n    gem \"compass-hdpi\", :git => \"git://github.com/pierreburel/compass-hdpi.git\"\r\n    gem \"compass\", \">= 0.12.2\"\r\n    gem \"sass\", \">= 3.2.0\"\r\n\r\nAnd run \r\n\r\n    bundle install\r\n\r\nOr download and copy the extension in the `extensions` folder in your project directory (or in `vendor/plugins/compass_extensions` for Rails applications).  \r\n\r\nThen, add the following line in your config.rb file :\r\n\r\n    require \"compass-hdpi\"\r\n\r\n---\r\n\r\n## Sprites\r\n\r\n### @mixin sprite-hdpi($map, $map-hdpi, $sprite, $dimensions)\r\n\r\nInclude the position and (optionally) dimensions of this `$sprite` in the given sprite `$map` and `$map-hdpi`. The sprite url should come from either a base class or you can specify the `sprite-url` explicitly like this:\r\n\r\n    background: $map no-repeat;\r\n\r\n\r\n#### Arguments\r\n\r\n - `$map`: normal `sprite-map` \r\n - `$map-hdpi`: HDPI `sprite-map`\r\n - `$sprite`: sprite name\r\n - `$dimensions`: set element dimensions based on sprite size (boolean, default to `false`)\r\n\r\n\r\n#### Example\r\n\r\n    @import \"compass-hdpi\";\r\n\r\n    $icons: sprite-map(\"icons/*.png\");\r\n    $icons-hdpi: $sprite-map(\"icons@2x/*.png\");\r\n\r\n    .icon-facebook {\r\n      $background: $icons no-repeat;\r\n      @include sprite($icons, $icons-hdpi, facebook, true);\r\n    }\r\n\r\n\r\n### @mixin sprites-hdpi($map, $map-hdpi, $sprites, $base-class, $dimensions, $prefix)\r\n\r\nGenerates a class for each space separated name in `$sprite-names`.\r\nThe class will be of the form .<map-name>-<sprite-name>.\r\n\r\nIf a base class is provided, then each class will extend it.\r\n\r\nIf `$dimensions` is `true`, the sprite dimensions will specified.\r\n\r\n\r\n#### Arguments\r\n\r\n - `$map`: normal `sprite-map` \r\n - `$map-hdpi`: HDPI `sprite-map`\r\n - `$sprites`: sprites names (default to all sprites)\r\n - `$base-class`: class to extend (default to false)\r\n - `$dimensions`: set element dimensions based on sprite size (boolean, default to `false`)\r\n - `$prefix`: class prefix (default to `sprite-map` name)\r\n\r\n\r\n#### Example #1\r\n\r\n    @import \"compass-hdpi\";\r\n\r\n    $icons: sprite-map(\"icons/*.png\");\r\n    $icons-hdpi: $sprite-map(\"icons@2x/*.png\");\r\n\r\n    .icon {\r\n      $background: $icons no-repeat;\r\n      height: 16px;\r\n      width: 16px;\r\n      @include hide-text;\r\n      @include inline-block;\r\n    }\r\n    @include sprites-hdpi($icons, $icons-hdpi);\r\n\r\n\r\n#### Example #2\r\n    \r\n    @import \"compass-hdpi\";\r\n\r\n    $sprites: sprite-map(\"sprites/*.png\");\r\n    $sprites-hdpi: $sprite-map(\"sprites-hdpi/*.png\");\r\n\r\n    .icons {\r\n      $background: $sprites no-repeat;\r\n      @include hide-text;\r\n      @include inline-block;\r\n    }\r\n    @include sprites-hdpi($sprites, $sprites-hdpi, facebook twitter, \".icons\", true, \"icon\");\r\n\r\n---\r\n\r\n## Images\r\n\r\n### @mixin background-image-hdpi($image, $image-hdpi, $dimensions)\r\n\r\nSet a normal and HDPI background-image and (optionally) its dimensions\r\n\r\n\r\n#### Arguments\r\n\r\n - `$image`: normal image path\r\n - `$image-hdpi`: HDPI image path\r\n - `$dimensions`: set element dimensions based on image size (boolean, default to `false`)\r\n\r\n\r\n#### Example\r\n\r\n    @import \"compass-hdpi\";\r\n\r\n    .logo {\r\n      @include background-image-hdpi(\"logo.png\", \"logo@2x.png\", true);\r\n    }\r\n\r\n\r\n### @mixin inline-background-image-hdpi($image, $image-hdpi, $dimensions)\r\n\r\nSet a normal and HDPI inline background-image and (optionally) its dimensions\r\n\r\n\r\n#### Arguments\r\n\r\n - `$image`: normal image path\r\n - `$image-hdpi`: HDPI image path\r\n - `$dimensions`: set element dimensions based on image size (boolean, default to `false`)\r\n\r\n\r\n#### Example\r\n\r\n    @import \"compass-hdpi\";\r\n\r\n    .logo {\r\n      height: 50px;\r\n      width: 100px;\r\n      @include inline-background-image-hdpi(\"logo.png\", \"hdpi/logo.png\");\r\n    }\r\n\r\n---\r\n\r\n## Configuration and other mixins\r\n\r\nYou can override the HDPI media query with the `$media-hdpi` variable which is by default :\r\n\r\n    $media-hdpi: \"(min--moz-device-pixel-ratio: 1.5),\r\n      (-o-min-device-pixel-ratio: 3/2),\r\n      (-webkit-min-device-pixel-ratio: 1.5),\r\n      (min-device-pixel-ratio: 1.5),\r\n      (min-resolution: 1.5dppx)\" !default;\r\n\r\nYou can then use the `media-hdpi` mixin to easily target HDPI devices :\r\n\r\n    .hr {\r\n      background: blue;\r\n\r\n      @include media-hdpi {\r\n        background: red;\r\n      }\r\n    }\r\n\r\nYou can force HDPI assets on normal screens by setting the `$force-hdpi` variable to `true` (default to `false`)\r\n\r\n    $force-hdpi: false !default;\r\n\r\nYou can also totally disable HDPI assets by setting the `$disable-hdpi` variable to `true` (default to `false`)\r\n\r\n    $disable-hdpi: false !default;"}